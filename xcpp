#!/usr/bin/env bash

# Copyright (C) 2019 St√©phane Duguay <s@binarez.com>
# This file and all the code it contains may only be used under the terms
# of the GNU General Public License (GPL), version 2 or later.
# The full text of the GPL version 2 license is available at:
# https://www.gnu.org/licenses/gpl-2.0.html

# --OPTIONS--
# -h --help | show help
# --version | prints version number at program startup
# -c --compiler | select compiler
# -l --locale
# -b --boost
# -v --verbose
# -m --mode (debug, release, custom, etc.)
# -o --options | compiler options
# -f --config-file
# -q --quiet
# -r --reverse | reverse compiler output (bottom to top printout)

# --TODO--
# xcpp config -> install to /usr/local/bin ou choix du path dans $PATH ou custom, choix compilateur
# xcpp test -> automatically calls the test function of a .xcpp or .xhpp file
# xcpp info
# xcpp show FILE.xhpp or FILE.xcpp -> prints the first comment in the source file

# --CODE--

# Stop execution on error
set -e

#----[ Constants ] ------------------------------------------------------------
readonly xcppVersion=0
readonly xcppVersionRev=8
readonly xcppWatchDelay=1	# Seconds: 1.5 = 1500 ms
readonly xcppUserConfig="~/.xcpp/xcpp.config"
readonly xcppDirectoryConfig="./xcpp.config"

#----[ Variables ] ------------------------------------------------------------
xcppSubCommand=""
xcppElfFile=""
xcppIncludeFile=""

#----[ Config: default values ] -----------------------------------------------
xcppOpt_help=false
xcppOpt_version=false
xcppOpt_compiler="gcc"
xcppOpt_locale=""
xcppOpt_boost=""
xcppOpt_verbose=false
xcppOpt_mode=""
xcppOpt_options=""
xcppOpt_configfile=""
xcppOpt_quiet=false
xcppOpt_reverse=false

#-------------------------------------------------------------------------------
# $1 option name
OptEnabled () {
	local var="xcppOpt_$1";
	if [[ ${!var} == "true" ]]; then
		return 0;
	fi
	return 1;
}

#-------------------------------------------------------------------------------
# UnQuote string
UnQuote () {
	if [[ $1 == \'*\' ]]; then
		if [[ ${#1} -gt 2 ]]; then
			local IFS="''"
			read _ stringVal _ <<<"$1"
			echo "$stringVal"
		fi
	else
		echo "$1"
	fi
}

#----[ Compilers setup ] ------------------------------------------------------------
xcpp_g++ () {
	echo g++ -fdiagnostics-color=always -pipe -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName
}

xcpp_g++_debug () {
	echo g++ -g -fdiagnostics-color=always -pipe -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName
}

xcpp_g++_release () {
	echo g++ -O3 -fdiagnostics-color=always -pipe -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName
}

xcpp_gcc () {
	echo gcc -fdiagnostics-color=always -pipe -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName -lstdc++
}

xcpp_gcc_debug () {
	echo gcc -g -fdiagnostics-color=always -pipe -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName -lstdc++
}

xcpp_gcc_release () {
	echo gcc -O3 -fdiagnostics-color=always -pipe -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName -lstdc++
}

xcpp_clang () {
	echo clang -fdiagnostics-color=always -pipe -lstdc++ -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName
}

xcpp_clang_debug () {
	echo clang -g -fdiagnostics-color=always -pipe -lstdc++ -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName
}

xcpp_clang_release () {
	echo clang -O3 -fdiagnostics-color=always -pipe -lstdc++ -xc++ $xcppOpt_options -include $xcppIncludeFile -o $xcppElfFile /dev/stdin $xcppFileName
}

#-------------------------------------------------------------------------------
# [$1] optional : elf file name
CreateTempFiles () {
	if [[ -z $1 ]]; then
		xcppElfFile=$(mktemp /tmp/xcpp.XXXXXXXXXXXXXXXX.elf)
	else
		xcppElfFile="$1"
	fi
	xcppIncludeFile=$(mktemp /tmp/xcpp.XXXXXXXXXXXXXXXX.h)
}

#-------------------------------------------------------------------------------
# $1 the char
# $2 number of times the char is repeated
StringOfChar () {
    local fillsize=$2
    local fill=""
    while [[ $fillsize -gt 0 ]]
    do
	    fill="$1${fill}"
        ((fillsize=fillsize-1))
    done
	echo $fill
}

#-------------------------------------------------------------------------------
PrintVersion () {
	echo "xcpp $xcppVersion.$xcppVersionRev"
}

#-------------------------------------------------------------------------------
CmdPrintHelp () {
	PrintVersion
	echo ""
	echo "usage:"
	echo "$0 FILE.xcpp [ARG1 ARG2 ... ARGN]"
	echo ""
	echo "Optionally, specify gcc options:"
	echo "$0 [GCC_OPTIONS] FILE.xcpp [ARG1 ARG2 ... ARGN]"
	echo ""
	echo "For example, to run crunch.xcpp with O3 level and native optimizations:"
	echo "$0 -march=native -O3 crunch.xcpp"
}

#-------------------------------------------------------------------------------
HelpRun () {
	echo "Compiles and executes an xcpp file."
    echo "xcpp run FILE.xcpp"
}

#-------------------------------------------------------------------------------
HelpBuild () {
	echo "Builds an xcpp file into an executable binary."
    echo "xcpp build FILE.xcpp [FILE.out]"
	echo " FILE.out defaults to FILE.xcpp.out if not specified"
}

#-------------------------------------------------------------------------------
HelpWatch () {
	echo "Compiles, executes and monitors changes to an xcpp file."
    echo "xcpp watch FILE.xcpp"
}

#-------------------------------------------------------------------------------
HelpNew () {
	echo "Creates a new xcpp file."
    echo "xcpp new FILE.xcpp [FILE2.xcpp ... FILEN.xcpp]"
}

#-------------------------------------------------------------------------------
HelpExportHeader () {
	echo "Exports a header file containing the xcpp environment."
    echo "xcpp export_h [FILE.h]"
	echo " FILE.h defaults to xcpp.h if not specified"
}

#-------------------------------------------------------------------------------
HelpExportCpp () {
	echo "Exports a single cpp file containing your xcpp program and the xcpp environment. Allows for standalone compilation without xcpp."
    echo "xcpp export INFILE.xcpp OUTFILE.cpp"
}

#-------------------------------------------------------------------------------
GenerateXcppHeader () {
	echo "\
#ifndef _XCPP_HEADER_RESERVED_H_
#define _XCPP_HEADER_RESERVED_H_

#define __XCPP_VERSION__ $xcppVersion

#include <bits/stdc++.h>

using strings = std::vector< std::string >;
using sz = std::size_t;
using ssz = ssize_t;

using i8 = std::int8_t;
using i16 = std::int16_t;
using i32 = std::int32_t;
using i64 = std::int64_t;

using u8 = std::uint8_t;
using u16 = std::uint16_t;
using u32 = std::uint32_t;
using u64 = std::uint64_t;

using f32 = float;
using f64 = double;
using f128 = __float128; // long double?

template <typename T>
inline std::string str(const T & val)
{
	return std::to_string(val);
}

template <std::size_t N>
inline std::string str(const char (&val)[N])
{
	return std::string{ val };
}

template< typename T >
inline bool within( const T & low, const T & value, const T & hi)
{
	return (low <= value) && (value <= hi);
}

template < typename CONTAINER_TYPE, typename VALUE_TYPE >
inline void purge( CONTAINER_TYPE & container, const VALUE_TYPE & value )
{
	container.erase( std::remove( container.begin(), container.end(), value ), container.end() );
}

template < typename CONTAINER_TYPE, typename COMPARE_FUNC >
inline void purge_if( CONTAINER_TYPE & container, const COMPARE_FUNC & func )
{
	container.erase( std::remove_if( container.begin(), container.end(), func ), container.end() );
}

inline int stricmp(const char * a, const char * b)
{
#ifdef _MSC_VER
	return _stricmp(a, b);
#else
	return strcasecmp(a, b);
#endif
}

// trim from start (in place)
inline void ltrim(std::string &s)
{
	s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int ch) {
		return !std::isspace(ch);
	}));
}

// trim from end (in place)
inline void rtrim(std::string &s)
{
	s.erase(std::find_if(s.rbegin(), s.rend(), [](int ch) {
		return !std::isspace(ch);
	}).base(), s.end());
}

// trim from both ends (in place)
inline void trim(std::string &s)
{
	ltrim(s);
	rtrim(s);
}

inline void to_lower( std::string & s )
{
	std::transform(s.begin(), s.end(), s.begin(), std::ptr_fun<int, int>(std::tolower));
}

inline void to_upper( std::string & s )
{
	std::transform(s.begin(), s.end(), s.begin(), std::ptr_fun<int, int>(std::toupper));
}

inline void newline( void )
{
	std::cout << std::endl;
}

inline void snewline( std::ostream & o )
{
	o << std::endl;
}

template <typename Arg, typename... Args>
inline void sprint(std::ostream & o, Arg&& arg, Args&&... args)
{
    o << std::forward<Arg>(arg);
    (void)(int[]){0, (void(o << std::forward<Args>(args)), 0)...};
}

template <typename CONTAINER_TYPE>
inline void sprint_range(std::ostream & o, const CONTAINER_TYPE & c, char separator = ' ')
{
	auto i{ begin(c) };
	const auto e{ end(c) };
	if( i != e )
	{
		o << *i;
		for( ++i; i != e; ++i )
		{
			o << separator << *i;
		}
	}
}

template <typename Arg, typename... Args>
inline void sprintln(std::ostream & o, Arg&& arg, Args&&... args)
{
	sprint( o, std::forward<Arg>(arg), std::forward<Args>(args)... );
	o << std::endl;
}

template <typename CONTAINER_TYPE>
inline void sprintln_range(std::ostream & o, const CONTAINER_TYPE & c, char separator = ' ')
{
	sprint_range( o, c, separator );
	o << std::endl;
}

template <typename Arg, typename... Args>
inline void print(Arg&& arg, Args&&... args)
{
	sprint( std::cout, std::forward<Arg>(arg), std::forward<Args>(args)... );
}

template <typename Arg, typename... Args>
inline void println(Arg&& arg, Args&&... args)
{
	sprintln( std::cout, std::forward<Arg>(arg), std::forward<Args>(args)... );
}

template <typename CONTAINER_TYPE>
inline void print_range(const CONTAINER_TYPE & c, char separator = ' ')
{
	sprint_range( std::cout, c, separator );
}

template <typename CONTAINER_TYPE>
inline void println_range(const CONTAINER_TYPE & c, char separator = ' ')
{
	sprintln_range( std::cout, c, separator );
}

template <typename Arg, typename... Args>
inline std::string concat(Arg&& arg, Args&&... args)
{
	std::ostringstream ss;
	sprint( ss, std::forward<Arg>(arg), std::forward<Args>(args)... );
	return ss.str();
}

template <typename CONTAINER_TYPE>
inline std::string concat_range(const CONTAINER_TYPE & c, char separator = ' ')
{
	std::ostringstream ss;
	sprint_range( ss, c, separator );
	return ss.str();
}

template <typename Arg, typename... Args>
inline bool sread( std::istream & i, Arg && arg, Args&&... args )
{
	bool ok{ ( i >> std::forward<Arg>(arg) ) };
	if( ok )
	{
		(void)(int[]){0, (void((i >> std::forward<Args>(args)) ? 0 : (ok = false, 0) ), 0)...};
	}
	if( !ok )
	{
		i.clear();
	}
	i.ignore(std::numeric_limits<std::streamsize>::max() - 1, '\n');
	return ok;
}

template <typename Arg, typename... Args>
inline bool read(Arg&& arg, Args&&... args)
{
	return sread( std::cin, std::forward<Arg>(arg), std::forward<Args>(args)... );
}

inline bool sreadln( std::istream & i, std::string & val )
{
	return static_cast< bool >( std::getline( i, val ) );
}

inline bool readln( std::string & val )
{
	return sreadln( std::cin, val );
}

inline void press_enter( void )
{
	print(\"Press Enter to continue...\");
	std::cin.get();
}

inline void seed_rand( unsigned int seed = 0 )
{
	if( seed == 0 )
	{
		std::srand( static_cast< unsigned int >( std::time( NULL ) ) );
	}
	else
	{
		std::srand( seed );
	}
}

inline void sleep_ms( sz msTime )
{
	std::this_thread::sleep_for( std::chrono::milliseconds(msTime) );
}

using namespace std;

#endif // _XCPP_HEADER_RESERVED_H_ \
" 		> "$1"
}

#-------------------------------------------------------------------------------
OutputXcppMainCpp () {
	echo "\

#include <vector>
#include <string>
/* #include <clocale> */

int main(int _xcpp_reserved_argc_, const char * _xcpp_reserved_argv_[])
{
	/* setlocale( LC_ALL, \"\" ); */
	int $1( std::vector<std::string> );
	return $1( std::vector<std::string>(_xcpp_reserved_argv_ + 1,
										_xcpp_reserved_argv_ + _xcpp_reserved_argc_) );
}\
"
}

#-------------------------------------------------------------------------------
ExecuteXcppBinary () {
	chmod +x "$2"	# Make executable
	# Execute
	if [[ $(UnQuote "$1") == "runbg" ]]; then
		"$2" "${@:3}" &
	else
		"$2" "${@:3}"
	fi
	return $?
}

#-------------------------------------------------------------------------------
ExtractFunctionName () {
	local funcname=$(basename "$1")
	funcname=${funcname%%.*}
	funcname="${funcname//[^[:alnum:]]/_}"
	echo $funcname
}

#-------------------------------------------------------------------------------
CompileXcpp () {
	local xcppFileName="$1"
	local xcppFunctionName=$(ExtractFunctionName "$1")
	local termCols=$(tput cols)
	if OptEnabled verbose ; then
		echo $(StringOfChar "-" $termCols)
		echo Compiling: $("xcpp_$xcppOpt_compiler")
	elif ! OptEnabled quiet ; then
		echo -ne "Compiling with $xcppOpt_compiler "
	fi

	set -o pipefail
	if OptEnabled reverse ; then
		OutputXcppMainCpp "$xcppFunctionName" | $("xcpp_$xcppOpt_compiler") 2>&1 | tac
	else
		OutputXcppMainCpp "$xcppFunctionName" | $("xcpp_$xcppOpt_compiler")
	fi
	local compilerRetVal=$?
	set -o pipefail

	if OptEnabled verbose ; then
		echo $(StringOfChar "-" $termCols)
	fi

	echo -ne "\r                                                                   \r"
	return $compilerRetVal
}

#-------------------------------------------------------------------------------
# Runs an xcpp file
# $1 command: run, defrun, spinrun,
# $2 xcpp file to run
CmdRun () {
	if [[ $# -lt 2 ]]; then
		HelpRun
		return
	fi

	CreateTempFiles
	# Trap exit for temp files removal and processes termination
	trap "{ rm -f $xcppElfFile; rm -f $xcppIncludeFile; kill 0; }" EXIT
	GenerateXcppHeader "$xcppIncludeFile"

	CompileXcpp $(UnQuote "$2")
	if [[ $? -eq 0 ]]; then
		eval ExecuteXcppBinary $(UnQuote "$1") "$xcppElfFile" "${@:2}"
	fi
	return $?
}

#-------------------------------------------------------------------------------
# Builds an xcpp file
# $1 command: build, build_*
# $2 xcpp file to build
# [$3] optional : output elf file name
CmdBuild () {
	if [[ $# -lt 2 ]]; then
		HelpBuild
		return
	fi
	local elfToBuild=$(UnQuote "$3")
	if [[ -z "$elfToBuild" ]]; then
		elfToBuild="./$(basename $(UnQuote "$2")).out"
	elif [[ -d "$elfToBuild" ]]; then
		elfToBuild="$elfToBuild/$(basename $(UnQuote "$2")).out"
	fi

	CreateTempFiles "$elfToBuild"
	# Trap exit for temp files removal and processes termination
	trap "{ rm -f $xcppIncludeFile; }" EXIT
	GenerateXcppHeader "$xcppIncludeFile"

	CompileXcpp $(UnQuote "$2")
}

#-------------------------------------------------------------------------------
# [$1] Header file to produce (output): defaults to xcpp.h if not specified
CmdExportHeader () {
	set -- $(UnQuote "$1")
	if [[ $# -lt 1 ]]; then
		set -- xcpp.h
		echo xcpp.h
	elif [[ $# -ne 1 ]]; then
		HelpExportHeader;
		return
	fi

	if [[ -f "$1" ]]; then
		echo xcpp error: \""$1"\" already exists, not overwriting.
	else
		GenerateXcppHeader "$1"
	fi
}

#-------------------------------------------------------------------------------
# Export a cpp file from an xcpp file.
# $1 xcpp file (input)
# $2 cpp file (output)
CmdExportCpp () {
	set -- $(UnQuote "$1") $(UnQuote "$2")
	if [[ $# -ne 2 ]]; then
		HelpExportCpp
		return
	elif [[ ! -f "$1" ]]; then
		echo xcpp error: \""$1"\" not found.
	elif [[ -f "$2" ]]; then
		echo xcpp error: \""$2"\" already exists, not overwriting.
	else
		GenerateXcppHeader "$2"
		cat "$1" >> "$2"
		OutputXcppMainCpp $(ExtractFunctionName "$1") >> "$2"
	fi
}

#-------------------------------------------------------------------------------
# Kills a process and deletes temp files
# $1 PID
StopProcess () {
	if ps -p "$1" | grep -q 'xcpp'; then
		kill -9 $1 &> /dev/null
	fi
	rm -f "$xcppElfFile"
	xcppElfFile=""
	rm -f "$xcppIncludeFile"
	xcppIncludeFile=""
}

#-------------------------------------------------------------------------------
# Observe an xcpp file and re-runs it on change.
# $1 watch command (watch or watch_*)
# $2 xcpp file to watch
CmdWatch () {
	if [[ $# -lt 2 ]]; then
		HelpWatch
		return
	fi
	# Enabling parts of the watch jobs to fail
	# Example: the compiler failing to compile because of a syntax error.
	set +e

	local file=$(UnQuote "$2")
	local lastHash=$(sha256sum $file)
	CmdRun runbg "${@:2}"
	local watchedPID=$!
	while true; do
	  sleep $xcppWatchDelay
	  local newHash=$(sha256sum $file)
	  if [ "$newHash" != "$lastHash" ]; then
		clear
		disown &> /dev/null
		StopProcess $watchedPID
		CmdRun runbg "${@:2}"
		watchedPID=$!
		lastHash="$newHash"
	  fi
	done
}

#-------------------------------------------------------------------------------
CmdNewXcppFiles () {
	if [[ $# -lt 1 ]]; then
		HelpNew
		return
	fi

	for file in "$@"
	do
		file=$(UnQuote "$file")
		if [[ -f "$file" ]]; then
			echo xcpp error: \""$file"\" already exists, not overwriting.
			continue
		fi
		local xcppFunctionName=$(ExtractFunctionName "$file")
		echo "\
#if !defined(__XCPP__)
#define __XCPP__ $xcppVersion
#elif defined(__XCPP__)
#pragma once
#else
. xcpp run \"\$0\" \"\$@\"
#endif

int $xcppFunctionName( strings args )
{
	println( \"Hello, world!\" );
	return 0;
}\
" 		> "$file"
	done
}

#-------------------------------------------------------------------------------
# $1 Config file name
LoadConfigFile () {
. $1
# https://unix.stackexchange.com/questions/260840/read-columns-from-file-into-separate-variables
#while IFS=" " read -r value1 value2 remainder
#do
#    ...
#done < "input.txt"	
}

#-------------------------------------------------------------------------------
# $1 variable name
EchoVarAndValue () {
	local varName="$1"
	echo "$varName": ${!varName}
}
#-------------------------------------------------------------------------------
PrintConfig () {
	EchoVarAndValue xcppOpt_configfile
	EchoVarAndValue xcppOpt_compiler
	type $"xcpp_$xcppOpt_compiler"
	EchoVarAndValue xcppOpt_mode
	EchoVarAndValue xcppOpt_options
	EchoVarAndValue xcppOpt_boost
	EchoVarAndValue xcppOpt_locale
	EchoVarAndValue xcppOpt_verbose
	EchoVarAndValue xcppOpt_quiet
	EchoVarAndValue xcppOpt_reverse
	EchoVarAndValue xcppOpt_help
	EchoVarAndValue xcppOpt_version
}

#-------------------------------------------------------------------------------
LoadConfig () {
	if [[ -f "$xcppUserConfig" ]]; then
		LoadConfigFile "$xcppUserConfig"
	fi
	if [[ -f "$xcppDirectoryConfig" ]]; then
		LoadConfigFile "$xcppDirectoryConfig"
	fi
}

#-------------------------------------------------------------------------------
# Returns 0 (success) if getopt is installed on the machine
IsGetOptInstalled () {
	! getopt --test > /dev/null 
	if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
		return 1;
	fi
	return 0;
}

#-------------------------------------------------------------------------------
# $@ : parsed arguments
XcppProcessOptions () {
	while true; do
		case "$1" in
			-h|--help)
				xcppOpt_help=true
				shift
				;;
			--version)
				xcppOpt_version=true
				shift
				;;
			-c|--compiler)
				xcppOpt_compiler="$2"
				shift 2
				;;
			-l|--locale)
				xcppOpt_locale="$2"
				shift 2
				;;
			-b|--boost)
				xcppOpt_boost=true
				shift
				;;
			-v|--verbose)
				xcppOpt_verbose=true
				shift
				;;
			-m|--mode)
				xcppOpt_mode="$2"
				shift 2
				;;
			-o|--options)
				xcppOpt_options="$2"
				shift 2
				;;
			-f|--config-file)
				xcppOpt_configfile="$2"
				shift 2
				;;
			-q|--quiet)
				xcppOpt_quiet=true
				shift
				;;
			-r|--reverse)
				xcppOpt_reverse=true
				shift
				;;
			--)
				shift
				break
				;;
			*)
				echo "xcpp error: fatal error processing options."
				exit 253
				;;
		esac
	done
	xcppSubCommand="$@"
}

#-------------------------------------------------------------------------------
# No param
XcppCheckOptions () {
	if OptEnabled quiet && OptEnabled verbose; then
		echo "xcpp warning: quiet and verbose options set, ignoring quiet."
	fi
}

#-------------------------------------------------------------------------------
# $@ : arguments
XcppParseOptions () {
	local OPTIONS=hc:l:bvm:o:f:qr
	local LONGOPTS=help,version,compiler:,locale:,boost,verbose,mode:,options:,config-file:,quiet,reverse

	# -use ! and PIPESTATUS to get exit code with errexit set
	# -temporarily store output to be able to check for errors
	# -activate quoting/enhanced mode (e.g. by writing out ‚Äú--options‚Äù)
	# -pass arguments only via   -- "$@"   to separate them correctly
	local PARSED=""
	! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "xcpp error" -- "$@")
	if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
		# error: getopt has complained about wrong arguments to stdout
		exit 254
	fi

	# Process
	XcppProcessOptions $PARSED
}

#-------------------------------------------------------------------------------
# $@ : arguments
Main() {
	# Help
	if [[ $# -lt 1 ]] || [[ $1 == "-h" ]] || [[ $1 == "--help" ]] || [[ $1 == "help" ]]; then
		CmdPrintHelp
		exit 0
	fi

	# Options
	LoadConfig
	if IsGetOptInstalled; then
		XcppParseOptions "$@"
	else
		echo "xcpp warning: bash-getopt not available. Cannot parse options, running with default configuration. Please do not specify options."
		xcppSubCommand="$@"
	fi

	# Version
	if OptEnabled version || OptEnabled verbose; then
		PrintVersion
	fi

	XcppCheckOptions

	# Verbose
	if OptEnabled verbose ; then
		echo "Verbose activated"
		echo "Options parsed, remaining: $xcppSubCommand"
		PrintConfig
	fi

	set -- $xcppSubCommand

	# Run sub-command
	local subCommand=$(UnQuote "$1")
	if [[ $subCommand == "run" ]]; then
		CmdRun "$@"
		exit $?
	elif [[ $subCommand == "watch" ]]; then
		CmdWatch "$@"
	elif [[ $subCommand == "build" ]]; then
		CmdBuild "$@"
		exit $?
	elif [[ $subCommand == "new" ]]; then
		CmdNewXcppFiles "${@:2}"
	elif [[ $subCommand == "export" ]]; then
		CmdExportCpp "${@:2}"
	elif [[ $subCommand == "export_h" ]]; then
		CmdExportHeader "${@:2}"
	else
		echo "xcpp error: unknown subcommand $subCommand"
		echo "try 'xcpp help'"
		exit 255
	fi
}

# Boot
Main "$@"
exit 0
